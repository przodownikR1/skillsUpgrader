apply plugin: 'org.springframework.boot'


apply plugin: "com.gorylenko.gradle-git-properties"
 
 
springBoot {
   buildInfo {
        // Generate extra build info.
        properties {
            additional = [
               by: System.properties['user.name'],
               operatingSystem: "${System.properties['os.name']} (${System.properties['os.version']})",
               continuousIntegration: System.getenv('CI') ? true: false,
               machine: InetAddress.localHost.hostName,
               time: buildTime(),
               'springBootVersion': "${springBootVersion}",
               'project.rootDir': "${project.rootDir}",
               'project.buildDir': "${project.buildDir}"
            ]
        }
    }
}


import java.text.DateFormat
import java.text.SimpleDateFormat
 
def buildTime() {
    final dateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ssZ")
    dateFormat.timeZone = TimeZone.getTimeZone('GMT')
    dateFormat.format(new Date())
}
gitProperties {
     /*gitRepositoryRoot = new File("${project.rootDir}/..")
     gitPropertiesDir = new File("${project.rootDir}/web/src/main/resources")*/
     dateFormat = "yyyy-MM-dd'T'HH:mmZ"
     dateFormatTimeZone = "EET"

}


bootRun {
    //addResources = true

    systemProperty 'management.info.git.mode', 'FULL'
    if (System.properties.containsKey('spring.profiles.active')) {
        systemProperty "spring.profiles.active", System.properties['spring.profiles.active']
    }

    def debugMode = []
    if (project.hasProperty('debugPort')) {
        debugMode = ['-Xdebug', '-Xrunjdwp:transport=dt_socket,server=y,suspend=n,address=' + project.getProperty('debugPort')]
    }

    def stdOpts = ['-Dfile.encoding=UTF8', '-Xms128m', '-Xmx256m', '-XX:+UseG1GC']
    def gcOpts = ['-verbose:gc', '-XX:+PrintGCDetails', '-XX:+PrintHeapAtGC',
                  '-XX:+PrintGCDateStamps', '-XX:+PrintTenuringDistribution',
                  '-XX:+PrintClassHistogram', '-Xloggc:gc.log']

    jvmArgs = stdOpts + gcOpts + debugMode

    if (project.hasProperty('jvmArgs')) {
        jvmArgs project.jvmArgs.split('\\s+')
    }

}
