buildscript {
	ext {
		springBootVersion = '1.4.3.RELEASE'
	}
	repositories {
		mavenCentral()
										jcenter()
								maven {
												url "https://plugins.gradle.org/m2/"
										}

			}

	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
				classpath 'org.junit.platform:junit-platform-gradle-plugin:1.0.0-M3'
								classpath "org.sonarsource.scanner.gradle:sonarqube-gradle-plugin:2.2.1"
				classpath("info.solidsoft.gradle.pitest:gradle-pitest-plugin:1.1.6")
				classpath 'org.kt3k.gradle.plugin:coveralls-gradle-plugin:2.4.0'
				classpath "net.saliman:gradle-cobertura-plugin:2.3.0"
				classpath "gradle.plugin.com.gorylenko.gradle-git-properties:gradle-git-properties:1.4.17"
				classpath 'org.ajoberstar:gradle-git:1.3.2'
				classpath 'org.asciidoctor:asciidoctor-gradle-plugin:1.5.1'
				classpath 'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.6'
				classpath 'com.github.jruby-gradle:jruby-gradle-plugin:0.1.5'
				classpath "org.liquibase:liquibase-gradle-plugin:1.2.1"


	}
}

apply from: "gradle/boot.gradle"
apply from: "gradle/dependencies.gradle"

//apply from: "gradle/report.gradle"
//apply from: "gradle/pit.gradle"
apply from: "gradle/jar.gradle"
apply from: "gradle/test.gradle"
apply from: "gradle/integrationTest.gradle"
apply from: "gradle/liquibase.gradle"
//apply from: "gradle/coverage.gradle"
//apply from: "gradle/quality.gradle"
apply from: "gradle/sonar.gradle"
//apply from: "gradle/ascii.gradle"

logger.lifecycle configurations.compile.name
logger.lifecycle "Using Spring Boot version: [$springBootVersion]"
logger.lifecycle "Using Java version: [" + System.getProperty("java.version") + "]"
logger.lifecycle "Running gradle version: $gradle.gradleVersion"


task sourceSetJavaProperties(group: 'startupSource',  description: 'show java dictionaries') {
		sourceSets {
				main {
						logger.lifecycle "java.srcDirs = ${java.srcDirs}"
						logger.lifecycle "resources.srcDirs = ${resources.srcDirs}"
						logger.lifecycle "output.classesDir = ${output.classesDir}"
						logger.lifecycle "output.resourcesDir = ${output.resourcesDir}"
						logger.lifecycle "output.files = ${output.files}"
				}
		}
}


compileJava.options.fork = true
//compileJava.options.forkOptions.executable = /usr/lib/jvm/java-8-oracle/bin


sourceSets {
		main { compileClasspath += configurations.compile }
		test {
				compileClasspath += configurations.compile
				runtimeClasspath += configurations.compile
		}
}

task makeDirs(group: 'startup',  description: 'create dictionary infrastucture'){

		doFirst(){
		def sources = [sourceSets.main, sourceSets.test]
		sources*.allSource*.srcDirs.flatten().each { File srcDir ->
				srcDir.mkdirs()
		}
}
}

task wrapper(type: Wrapper) {

}
